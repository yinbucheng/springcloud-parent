# 集成mybatis

第一步添加maven依赖
```
 <!-- druid连接池 -->
  <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid</artifactId>
        <version>1.1.0</version>
  </dependency>

   <dependency>
         <groupId>mysql</groupId>
         <artifactId>mysql-connector-java</artifactId>
         <scope>runtime</scope>
    </dependency>

      <!-- mybatisplus与springboot整合 注意这里包的顺序很重要 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatisplus-spring-boot-starter</artifactId>
                <version>1.0.5</version>
            </dependency>
            <!-- MP 核心库 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus</artifactId>
                <version>2.1.8</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>1.3.2</version>
            </dependency>
            <!--mybatisplugs插件结束 -->
```

第二步 添加核心配置

```
#数据库配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name= com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/mysql?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.username=root
spring.datasource.password=introcks1234
spring.datasource.initialization-mode=never
#spring.datasource.schema=classpath:schema.sql
#spring.datasource.data=classpath:data.sql


#mybatis
mybatis-plus.mapper-locations=classpath*:mapper/*.xml
#实体扫描，多个package用逗号或者分号分隔
mybatis-plus.typeAliasesPackage=cn.intellif.server.provider.entity
#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
mybatis-plus.global-config.id-type=1
#字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
mybatis-plus.global-config.field-strategy=2
#驼峰下划线转换
mybatis-plus.global-config.db-column-underline=true
#刷新mapper 调试神器
mybatis-plus.global-config.refresh-mapper=true
#数据库大写下划线转换
#capital-mode: true
#序列接口实现类配置
#key-generator: com.baomidou.springboot.xxx
#逻辑删除配置（下面3个配置）
logic-delete-value=0
logic-not-delete-value=1
#自定义SQL注入器
#sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
#自定义填充策略接口实现
#meta-object-handler: com.baomidou.springboot.xxx
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.cache-enabled=false
```
第三步 在springboot启动类上添加注解
```
@MapperScan(basePackages = {"cn.intellif.server.provider.service.db"})
```


# 集成swigger2

### 第一步添加依赖包

```
 <dependency>
     <groupId>io.springfox</groupId>
     <artifactId>springfox-swagger2</artifactId>
     <version>2.6.1</version>
 </dependency>

  <dependency>
       <groupId>io.springfox</groupId>
       <artifactId>springfox-swagger-ui</artifactId>
       <version>2.6.1</version>
 </dependency>
```

### 第二步在springboot启动类添加如下内容

```
添加如下注解开启swigger2功能
@EnableSwagger2

添加下面方法进行swigger初始配置

 @Bean
 public Docket createRestApi(){
        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select().apis(RequestHandlerSelectors.basePackage("cn"))
                .paths(PathSelectors.any()).build();
 }

 private ApiInfo apiInfo(){
        return new ApiInfoBuilder().title("spring boot 中使用swigger2").description("provider").termsOfServiceUrl("www.baidu.com").version("1.0.1").build();
 }

 第四步启动springboot项目返回
http://localhost:8000/swagger-ui.html （注意这里的端口是你springboot项目中配置的server.port端口）
```

额外补充（如果不添加如下注解swigger2也是可以利用反射获取到基础信息）
```
//这个配置到类上面用于说明当前controller的大致作用
@Api(tags = "TestController",description = "测试web项目")

//这个配置在方法上面用于说明当前方法大致作用
@ApiOperation(value = "说hello",notes = "说hello")

//这个也是加在方法上面用于说明当前参数的含义
@ApiImplicitParam(name="word",value = "单词",required = true,dataType = "String")

//如果方法上面存在多个入参可以用下面进行修饰
 @ApiImplicitParams({@ApiImplicitParam(name="someThing",value = "某些事件",required = true),@ApiImplicitParam(name = "hahaha",value = "hahaha",required = true)})
```